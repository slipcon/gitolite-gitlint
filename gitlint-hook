#!/bin/bash

# borrowed and adapted from https://github.com/andygrunwald/jitic


GIT=/usr/bin/git
GITLINT=/usr/local/bin/gitlint
GITLINTCFG=$GL_ADMIN_BASE/local/hooks/gitlint.cfg
LOCAL_GITLINTCFG=.gitlint.cfg

FUNCTIONS="gitlint-functions.sh"

. $FUNCTIONS


validate_ref()
{
    # Arguments
    oldrev=$($GIT rev-parse $1)
    newrev=$($GIT rev-parse $2)
    refname="$3"

    # $oldrev / $newrev are commit hashes (sha1) of git
    # $refname is the full name of branch (refs/heads/*) or tag (refs/tags/*)
    # $oldrev could be 0s which means creating $refname
    # $newrev could be 0s which means deleting $refname

    case "$refname" in
        refs/heads/*)
            # Pushing a branch delete...
            if [ 0 -ne $(expr "$newrev" : "0*$") ]; then
                COMMITS_TO_CHECK=""  # nothing to do

            # Pushing a new branch
            elif [ 0 -ne $(expr "$oldrev" : "0*$") ]; then
                COMMITS_TO_CHECK=$($GIT rev-list $newrev --not --branches=*)

            # Updating an existing branch
            else
                COMMITS_TO_CHECK=$($GIT rev-list $oldrev..$newrev)
            fi

            # If we push an new, but empty branch we can exit early.
            # In this case there are no commits to check.
            if [ -z "$COMMITS_TO_CHECK" ]; then
                return
            fi

            CFG=$( getGitlintCfg $newrev )

            # Get all commits, loop over and check if the comments are valid
            while read REVISION ; do
		        $GIT log --pretty=format:"%B" -n 1 $REVISION | $GITLINT -C $CFG

                if [ $? != 0 ]; then
                    FAIL=1
                    echo >&2 "... in revision $REVISION"
                fi
            done <<< "$COMMITS_TO_CHECK"

            cleanupGitlintCfg

            return
            ;;
        refs/tags/*)
            # Support for tags (new / delete) needs to be done.
            # Things we need to check:
            #   * Get all commits from the new tag that are NOT checked yet
            #     (checked means by jitic). Something like commits which are
            #     not pushed yet, but the tag was pushed.
            # I think we don`t need to care about deleted branches yet.
            ;;
        *)
            FAIL=1
            echo >&2 ""
            echo >&2 "*** pre-receive hook does not understand ref $refname in this repository. ***"
            echo >&2 "*** Contact the repository administrator. ***"
            echo >&2 ""
            ;;
    esac
}

HOOKGITLINT=$($GIT config --bool hook.gitlint)
HOOKIGNOREFEATURE=$($GIT config --bool hook.gitlint-ignore-feature-branches)

if [ "false" == "$HOOKGITLINT" -o -z "$HOOKGITLINT" ];
   exit 0;
fi

FAIL="0"

while read OLD_REVISION NEW_REVISION REFNAME
do
    FEATUREBRANCH=$(isFeatureBranch $REFNAME)
    if [ "true" == "$HOOKIGNOREFEATURE" -a "true" == "$FEATUREBRANCH" ];
        echo "ignoring gitlint hook on feature branch"
        continue
    fi

    validate_ref $OLD_REVISION $NEW_REVISION $REFNAME
done

if [ -n "$FAIL" ]; then
    exit $FAIL
fi

